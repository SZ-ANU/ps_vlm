#!/usr/bin/env python3
"""
Workflow parameters.

Default values set at bottom of this file after the helper code.
"""
import sys
import os

from pathlib import Path
from typing import List, Optional

EXPORTED = list()

def export(var, value: str|int):
    if isinstance(value, int):
        print(f"export {var}=${{{var}:-{value}}};")
    else:
        print(f"export {var}=${{{var}:-\"{value}\"}};")
    EXPORTED.append(var)

def gen_export(var: str, default: str|int, index: Optional[int] = None,
               fn: Optional[str] = None, required=False) -> None:
    # check if environment variable is already set and warn if so
    # because we will not overwrite it.
    if var in os.environ:
        envval = os.environ[var]
        print(f"WARNING: `{var}` is an environment variable ({var}={envval}) so `{var}.txt` will not be used.", file=sys.stderr)
        return
    # check if file exists and if so, export the value
    if fn is None:
        p = Path(f"{var}.txt")
    else:
        p = Path(f"{fn}.txt")
    if p.exists():
        if index is None:
            export(var, p.read_text().strip())
        else:
            values: List[str] = p.read_text().strip().split()
            value = values[index - 1] if index - 1 < len(values) else default
            export(var, value)
        return
    if required:
        print(f"ERROR: `{var}` not set and it is a required workflow parameter.", file=sys.stderr)
        print(f"exit 1")
        sys.exit(1)
    export(var, default)

def opt_export(var: str, default: str|int, index: Optional[int] = None, fn: Optional[str] = None) -> None:
    gen_export(var, default, index, required=False)

def req_export(var: str, index: Optional[int] = None, fn: Optional[str] = None) -> None:
    gen_export(var, "", index, fn, required=True)

def print_exported() -> None:
    for var in EXPORTED:
        print(f"echo {var}=${{{var}}};")


# Here we set all the default values. Some notes:
#  - Use the `req_export` and `opt_export` functions to set the values.
#  - The `req_export` function _will_ exit with an error if the value is not set.
#  - The `opt_export` function _will not_ exit with an error if the value is not set
#    and the default value will be used.
#  - The first argument is the name of the parameter.
#  - The second argument is the default value if the file `{param}.txt` does not exist.

cwd = Path.cwd()

req_export('aoi')
req_export('startdate', 1, 'daterange') # startdate is the first date in the daterange
req_export('enddate', 2, 'daterange') # enddate is the second date in the daterange
req_export('dem')
req_export('passdir')
req_export('map_srs')

opt_export('opodspath', '/g/data/dg9/orbits')
opt_export('aoi_srs', 4326)
opt_export('pol', 'vv')
opt_export('azlks', 1)
opt_export('rlks', 1)
opt_export('cwd', str(cwd))
opt_export('workdir', str(cwd / 'workdir'))


print_exported()
